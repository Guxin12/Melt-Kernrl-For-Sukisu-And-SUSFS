name: Kernel Builder

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: "选择构建类型"
        required: true
        default: "image"
        type: choice
        options:
          - image
          - ak3
      kernelsu_variant:
        description: "选择KernelSU变体"
        required: true
        default: "Official"
        type: choice
        options:
          - "Official"
          - "Next"
          - "MKSU"
          - "SukiSU"
      kernelsu_branch:
        description: "选择KernelSU分支"
        required: true
        default: "Dev(开发)"
        type: choice
        options:
          - "Stable(标准)"
          - "Dev(开发)"
      use_kpm:
        description: "启用KPM支持(SukiSU专用)"
        required: true
        default: true
        type: boolean

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: Guxin12/android_kernel_xiaomi_marble
          ref: melt-rebase
          path: melt
          fetch-depth: 1
          lfs: false

      - name: Clone SUSFS and SukiSU patches
        run: |
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android12-5.10
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

      - name: Install build essentials    
        run: |    
          sudo apt-get update    
          sudo apt-get install -y make flex bison libssl-dev libelf-dev bc build-essential ccache lld zip patch wget
          
          # 设置ccache    
          sudo mkdir /ccache    
          sudo chmod 777 /ccache    
          echo "CCACHE_DIR=/ccache" >> $GITHUB_ENV    
          echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV    
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV    
              
          echo "REPO_ROOT=$(pwd)" >> $GITHUB_ENV    
          echo "SYS_PATH=/usr/bin" >> $GITHUB_ENV    
              
          # 验证工具安装    
          echo "=== 工具版本 ==="    
          make --version | head -1    
          gcc --version | head -1    
          flex --version    
          bison --version    
          ccache --version    
          ld.lld --version || echo "ld.lld available"    
          echo "================"    

      - name: Download Clang    
        run: |    
          mkdir -p clang    
          echo "下载 Clang 编译器..."    
          
          # 使用可靠的镜像��
          CLANG_URL="https://mirror.ghproxy.com/https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/428d18d9732aa7ebfcaed87a582d86155db878d4/clang-r416183b.tar.gz"
          
          # 使用重试机制下载
          for i in {1..3}; do
            echo "尝试下载 Clang (第 $i 次)..."
            if wget --tries=3 --waitretry=5 --progress=bar:force -O clang.tar.gz "$CLANG_URL"; then
              # 验证下载完整性
              if [ $(stat -c%s clang.tar.gz) -gt 100000000 ]; then
                echo "下载成功！文件大小: $(stat -c%s clang.tar.gz) 字节"
                break
              else
                echo "下载文件太小($(stat -c%s clang.tar.gz)字节)，可能不完整"
                if [ $i -lt 3 ]; then
                  echo "等待 5 秒后重试..."
                  sleep 5
                fi
                rm -f clang.tar.gz
              fi
            else
              echo "下载失败"
              if [ $i -lt 3 ]; then
                echo "等待 5 秒后重试..."
                sleep 5
              fi
              rm -f clang.tar.gz
            fi
          done
          
          # 检查是否下载成功
          if [ ! -f "clang.tar.gz" ]; then
            echo "❌ 错误：Clang 下载失败"
            exit 1
          fi
              
          echo "解压 Clang..."    
          tar -zxf clang.tar.gz -C clang    
              
          # 确保ld.lld存在    
          if [ ! -f "clang/bin/ld.lld" ]; then
            echo "创建 ld.lld 链接"
            ln -s $(which ld.lld) clang/bin/ld.lld || true
          fi
              
          echo "CLANG_PATH=$(pwd)/clang/bin" >> $GITHUB_ENV    
          echo "=== Clang 版本 ==="    
          clang/bin/clang --version | head -1 || echo "无法获取Clang版本"    
          clang/bin/ld.lld --version | head -1 || echo "无法获取ld.lld版本"    
          echo "=================="    
          # 清理下载文件
          rm -f clang.tar.gz

      - name: 确定 KernelSU 的分支
        run: |
          branch_input="${{ inputs.kernelsu_branch }}"
          variant_input="${{ inputs.kernelsu_variant }}"
          
          case "$branch_input" in
            "Stable(标准)")
              echo "BRANCH=-" >> $GITHUB_ENV
              ;;
            "Dev(开发)")
              case "$variant_input" in
                "Official" | "MKSU") echo "BRANCH=-s main" >> $GITHUB_ENV ;;
                "Next")              echo "BRANCH=-s next-susfs-dev" >> $GITHUB_ENV ;;
                "SukiSU")           echo "BRANCH=-s susfs-main" >> $GITHUB_ENV ;;
                *) 
                  echo "错误：未定义开发分支的变体 '$variant_input'" >&2
                  exit 1
                  ;;
              esac
              ;;
            *)
              echo "错误：需要自定义分支时未提供参数" >&2
              exit 1
              ;;
          esac

      - name: 添加 KernelSU
        run: |
          # 检查是否在melt目录
          if [ ! -d "melt" ]; then
            echo "错误：melt目录不存在！"
            exit 1
          fi
          
          # 如果不在melt目录，则进入
          if [ "$(basename $(pwd))" != "melt" ]; then
            cd melt
          fi
          
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Adding KernelSU Official..."
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Adding KernelSU Next..."
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Adding KernelSU MKSU..."
            curl -LSs "https://raw.githubusercontent.com/5ec1cff/KernelSU/main/kernel/setup.sh" | bash $BRANCH
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Adding KernelSU SukiSU..."
            curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash $BRANCH
          fi
          
          # 返回工作目录
          if [ "$(basename $(pwd))" == "melt" ]; then
            cd ..
          fi

      - name: 为 KernelSU 变体安装 SUSFS 补丁
        run: |
          # 检查是否在melt目录
          if [ ! -d "melt" ]; then
            echo "错误：melt目录不存在！"
            exit 1
          fi
          
          # 如果不在melt目录，则进入
          if [ "$(basename $(pwd))" != "melt" ]; then
            cd melt
          fi
          
          echo "Applying SUSFS patches..."
          
          # 复制通用SUSFS补丁
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android12-5.10.patch ./
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/

          # 应用变体特定补丁
          if [ "${{ inputs.kernelsu_variant }}" == "Official" ]; then
            echo "Applying SUSFS patches for Official KernelSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying SUSFS patches for KernelSU-Next..."
            cd ./KernelSU-Next
            curl -LSs "https://raw.githubusercontent.com/zzh20188/GKI_KernelSU_SUSFS/dev/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch" -o susfs.patch
            patch -p1 --forward < susfs.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "MKSU" ]; then
            echo "Applying SUSFS patches for MKSU..."
            cd ./KernelSU
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./
            patch -p1 --forward --fuzz=3 < 10_enable_susfs_for_ksu.patch || true
            cd ..
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying SUSFS patches for SukiSU..."
            # SukiSU不需要额外补丁
          fi

          # 应用主SUSFS补丁
          patch -p1 --fuzz=3 < 50_add_susfs_in_gki-android12-5.10.patch || true
          
          # 返回工作目录
          if [ "$(basename $(pwd))" == "melt" ]; then
            cd ..
          fi
  
      - name: 应用新的HOOKS补丁
        run: |
          # 检查是否在melt目录
          if [ ! -d "melt" ]; then
            echo "错误：melt目录不存在！"
            exit 1
          fi
          
          # 如果不在melt目录，则进入
          if [ "$(basename $(pwd))" != "melt" ]; then
            cd melt
          fi
          
          if [ "${{ inputs.kernelsu_variant }}" == "Next" ]; then
            echo "Applying hooks for KernelSU-Next..."
            # 注意：路径已修正为从根目录开始
            cp ../susfs4ksu/kernel_patches/next/scope_min_manual_hooks_v1.4.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.4.patch
          elif [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            echo "Applying hooks for SukiSU..."
            # 注意：路径已修正为从根目录开始
            cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
          fi
          
          # 返回工作目录
          if [ "$(basename $(pwd))" == "melt" ]; then
            cd ..
          fi

      - name: 应用隐藏特征的补丁
        run: |
          # 检查是否在melt目录
          if [ ! -d "melt" ]; then
            echo "错误：melt目录不存在！"
            exit 1
          fi
          
          # 如果不在melt目录，则进入
          if [ "$(basename $(pwd))" != "melt" ]; then
            cd melt
          fi
          
          if [ "${{ inputs.kernelsu_variant }}" == "SukiSU" ]; then
            # 注意：路径已修正为从根目录开始
            cp ../SukiSU_patch/69_hide_stuff.patch ./
          else
            # 注意：路径已修正为从根目录开始
            cp ../susfs4ksu/kernel_patches/69_hide_stuff.patch ./
          fi
          patch -p1 -F 3 < 69_hide_stuff.patch
          
          # 返回工作目录
          if [ "$(basename $(pwd))" == "melt" ]; then
            cd ..
          fi

      - name: Build kernel (without LTO)    
        run: |    
          # 检查是否在melt目录
          if [ ! -d "melt" ]; then
            echo "错误：melt目录不存在！"
            exit 1
          fi
          
          # 如果不在melt目录，则进入
          if [ "$(basename $(pwd))" != "melt" ]; then
            cd melt
          fi
          
          # 设置编译环境    
          export PATH="${{ env.CLANG_PATH }}:/usr/lib/ccache:${{ env.SYS_PATH }}:$PATH"    
          export CC="ccache clang"    
          export CXX="ccache clang++"    
              
          # 清理并配置    
          make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out mrproper    
          make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out marble_defconfig    
          
          # 重新生成配置（确保所有补丁的配置生效）
          make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out olddefconfig
              
          # 构建内核    
          make ARCH=arm64 LLVM=1 LLVM_IAS=1 O=out -j$(nproc --all)    
              
          # 显示缓存统计    
          ccache -s
          
          # 返回工作目录
          if [ "$(basename $(pwd))" == "melt" ]; then
            cd ..
          fi

      - name: 修补 Image 文件 (仅限SukiSU)
        if: ${{ inputs.kernelsu_variant == 'SukiSU' && inputs.use_kpm }}
        run: |
          # 检查是否在melt目录
          if [ ! -d "melt" ]; then
            echo "错误：melt目录不存在！"
            exit 1
          fi
          
          # 进入melt目录
          cd melt
          
          # 确定Image文件的位置
          IMAGE_PATH="out/arch/arm64/boot/Image"
          
          # 检查Image文件是否存在
          if [ ! -f "$IMAGE_PATH" ]; then
            echo "错误：Image文件不存在！"
            exit 1
          fi
          
          # 下载patch工具
          echo "下载KPM修补工具..."
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU_patch/main/kpm/patch_linux" -o patch_kpm
          chmod +x patch_kpm
          
          # 创建临时目录并复制Image文件
          mkdir -p kpm_temp
          cp $IMAGE_PATH kpm_temp/Image
          
          # 进入临时目录执行修补
          cd kpm_temp
          ../patch_kpm
          
          # 检查是否修补成功
          if [ -f "oImage" ]; then
            # 替换原Image文件
            mv oImage ../$IMAGE_PATH
            echo "Image文件修补成功！"
          else
            echo "警告：修补可能失败，未生成oImage文件"
          fi
          
          # 清理临时文件
          cd ..
          rm -rf kpm_temp
          rm patch_kpm
          
          # 返回工作目录
          cd ..

      - name: Prepare artifacts    
        run: |    
          mkdir -p artifacts    
          cp melt/out/arch/arm64/boot/Image artifacts/kernel.img    
              
          # 获取内核版本    
          grep -a "Linux version" melt/out/vmlinux | awk '{print $3}' | head -1 > artifacts/kernel_version.txt    
              
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV    
          echo "KERNEL_VERSION=$(cat artifacts/kernel_version.txt)" >> $GITHUB_ENV    
              
          echo "=== 构建信息 ==="    
          echo "版本: $(cat artifacts/kernel_version.txt)"    
          echo "日期: ${{ env.BUILD_DATE }}"    
          echo "================"    

      - name: Upload kernel image    
        if: ${{ inputs.build_type == 'image' }}    
        uses: actions/upload-artifact@v4    
        with:    
          name: kernel-image    
          path: artifacts/kernel.img    

      - name: Package AK3    
        if: ${{ inputs.build_type == 'ak3' }}    
        run: |    
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3 ak3    
          cp artifacts/kernel.img ak3/Image    
              
          # 更新anykernel.sh配置    
          sed -i \    
            -e "s|kernel\.string=.*|kernel.string=Marble-Kernel-${{ env.KERNEL_VERSION }}|" \    
            -e "s|device\.name1=.*|device.name1=marble|" \    
            -e "s|device\.name2=.*|device.name2=marblein|" \    
            ak3/anykernel.sh    
              
          # 打包ZIP    
          cd ak3    
          zip -r9 "../artifacts/marble_melt_${{ env.KERNEL_VERSION }}.zip" *    
              
          echo "AK3_PATH=artifacts/marble_melt_${{ env.KERNEL_VERSION }}.zip" >> $GITHUB_ENV    

      - name: Upload AK3 package    
        if: ${{ inputs.build_type == 'ak3' }}    
        uses: actions/upload-artifact@v4    
        with:    
          name: kernel-ak3    
          path: ${{ env.AK3_PATH }}    

      - name: Create build summary    
        run: |    
          echo "### 🚀 内核构建报告" >> $GITHUB_STEP_SUMMARY    
          echo "#### 源码信息" >> $GITHUB_STEP_SUMMARY    
          echo "- 仓库: [Guxin12/android_kernel_xiaomi_marble](https://github.com/Guxin12/android_kernel_xiaomi_marble)" >> $GITHUB_STEP_SUMMARY    
          echo "- 分支: \`melt-rebase\`" >> $GITHUB_STEP_SUMMARY    
          echo "#### 构建参数" >> $GITHUB_STEP_SUMMARY    
          echo "- 类型: \`${{ inputs.build_type }}\`" >> $GITHUB_STEP_SUMMARY    
          echo "- 配置: \`marble_defconfig\`" >> $GITHUB_STEP_SUMMARY    
          echo "- KernelSU变体: \`${{ inputs.kernelsu_variant }}\`" >> $GITHUB_STEP_SUMMARY    
          echo "- KernelSU分支: \`${{ inputs.kernelsu_branch }}\`" >> $GITHUB_STEP_SUMMARY    
          echo "- KPM支持: \`${{ inputs.use_kpm }}\`" >> $GITHUB_STEP_SUMMARY    
          echo "#### 版本信息" >> $GITHUB_STEP_SUMMARY    
          echo "- 内核版本: \`${{ env.KERNEL_VERSION }}\`" >> $GITHUB_STEP_SUMMARY    
          echo "- 构建时间: \`${{ env.BUILD_DATE }} UTC\`" >> $GITHUB_STEP_SUMMARY    
          echo "#### 输出文件" >> $GITHUB_STEP_SUMMARY    
              
          if [ "${{ inputs.build_type }}" = "image" ]; then    
            echo "- Kernel Image: \`kernel.img\`" >> $GITHUB_STEP_SUMMARY    
          else    
            echo "- AK3 Package: \`$(basename ${{ env.AK3_PATH }})\`" >> $GITHUB_STEP_SUMMARY    
          fi    
              
          echo "> 构建ID: [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
